type SonarScan @rootType {
    analysedAt: String!
    project: SonarProject!
    properties(sonar_analysis_scmBranch: String, sonar_analysis_scmRevision: String): SonarProjectProperties!
    qualityGate: SonarQualityGate!
    serverUrl: String!
    status: String!
    taskId: String!
    push: Push!
        @linkTo(
            queryName: "pushBySha",
            variables: [
                {name: "afterSha", path: "$.properties.sonar_analysis_scmRevision"},
                {name: "branchName", path: "$.properties.sonar_analysis_scmBranch"}
            ]
        )
        @linkFrom(
            field: { kind: LIST, name: "sonarScan" }
            query: "query sonarScan($sha: String!, $branch: String!) {SonarScan { properties(sonar_analysis_scmBranch: $branch, sonar_analysis_scmRevision:$sha) { sonar_analysis_scmBranch sonar_analysis_scmRevision}}}"
            variables: [
                { name: "sha", path: "$.after.sha" }
                { name: "branch", path: "$.branch" }
            ]
        )
}
type SonarProjectProperties {
    sonar_analysis_scmRevision: String
    sonar_analysis_scmBranch: String
}
type SonarProject {
    key: String
    name: String
}
type SonarQualityGate {
    conditions: [SonarQualityGateCondition]
    name: String
    status: String
}
type SonarQualityGateCondition {
    errorThreshold: String
    metric: String
    onLeakPeriod: Boolean
    operator: String
    status: String
    value: String
}
